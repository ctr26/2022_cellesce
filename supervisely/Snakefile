import pims
import PIL
import os
# import supervisely as sly
from pathlib import Path
from glob import glob
from tqdm import tqdm
import dotenv
import random


configfile: "config.yaml"

include: "rules/supervisely.smk"
include: "rules/convert_to_png.smk"


dotenv.load_dotenv()
# from dotenv import load_dotenv
pims.bioformats.download_jar(version="6.7.0")
glob_str = expand(
    "{data_dir}/{folder}/{filename}{file_suffix}", **config, allow_missing=True
)[0]
folders, filenames = glob_wildcards(glob_str)

image_list = []

for folder, filename in zip(folders, filenames):
    # filename = "20230216/NMuMG-mut218_5um_20230213_useless"
    im = pims.Bioformats(glob_str.format(folder=folder, filename=filename))
    try:
    im.iter_axes = "ct"
    # print("Getting metadata")
        for i, frame in enumerate(im):
            coords = frame.metadata["coords"]
            coords["z"] = 0
            metadata = {"folder": folder, "filename": filename, "i": i, **coords}
            image_list.append(metadata)
        # return image_list
    except:
        print("Error with", filename)
        continue
uploaded_annotation_list = [
    expand(
        "results/plast_cell/{folder}/{filename}/i={i}_t={t}_z={z}_c={c}.uploaded",
        **image_metadata,
    )
    for image_metadata in image_list
]

if (config["image_subset"] is not None) and (
    len(uploaded_annotation_list) > config["image_subset"]
):
    uploaded_annotation_list = random.sample(
        uploaded_annotation_list, config["image_subset"]
    )


rule all:
    input:
        uploaded_annotation_list,

rule convert_to_zarr:
    conda:
        "envs/zarr.yaml"
    input:
        "data/plast_cell/{filename}.lif",
    output:
        directory("results/plast_cell/{filename}.zarr"),
    shell:
        """
        bioformats2raw '{input}' '{output}'
        """
