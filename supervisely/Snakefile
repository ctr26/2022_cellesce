import pims
import PIL
import os
import supervisely as sly
from pathlib import Path
from glob import glob
from tqdm import tqdm
import dotenv
import os

dotenv.load_dotenv()
# from dotenv import load_dotenv
pims.bioformats.download_jar(version="6.7.0")

(filename,) = glob_wildcards(
    "data/plast_cell/{filename}.lif",
)
WORKSPACE_ID = 83434

address = "https://app.supervise.ly/"
token = os.environ["API_TOKEN"]

import random
subset = 50

def get_pngs(wildcards,sample=None):
    # breakpoint()
    (filenames,) = glob_wildcards("data/plast_cell/{filename}.lif")
    # breakpoint()

    for filename in filenames:
        # breakpoint()
        # filename = "20230216/NMuMG-mut218_5um_20230213_useless"
        im = pims.Bioformats(f"data/plast_cell/{filename}.lif")
        # breakpoint()
        im.iter_axes = "ct"
        file_list = []
        # print("Getting metadata")
        for i, frame in enumerate(im):
            coords = frame.metadata["coords"]
            coords["z"] = 0
            file_list.extend(
                expand(
                    "results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.uploaded",
                    filename=filename,
                    i=i,
                    **coords,
                )
            )
    # breakpoint()
    if sample is not None:
        return random.sample(file_list)
    return file_list


# def supervisely_get(wildcards):
#     breakpoint()
#     snakemake.checkpoints.get_pngs(wildcards)


rule all:
    input:
        get_pngs,
        # supervisely_get,
        # dynamic(
        # expand(
        #     "results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.png",
        #     filename=filename,
        #     allow_missing=True,
        # ),
        # ),
        # expand(
        #     "results/plast_cell/{filename}.zarr/",
        #     filename=filename,
        # ),


# rule convert_to_png_dummy:
#     input:
#         wait_for_convert_to_png,
#     output:
#         touch("results/plast_cell/{filename}.done"),


# Define rule to convert .czi files to .zarr using bioformats2raw
rule convert_to_zarr:
    input:
        "data/plast_cell/{filename}.lif",
    output:
        directory("results/plast_cell/{filename}.zarr"),
    shell:
        """
        bioformats2raw '{input}' '{output}'
        """


# rule get_metadata:
#     input:
#         lif="data/plast_cell/{filename}.lif",
#     output:
#         metadata="results/plast_cell/{filename}/metadata.json",
#     run:
#         # breakpoint()
#         im = pims.Bioformats(input.lif)
#         # print(ims)
#         # Path(output.metadata).mkdir(exist_ok=True, parents=True)
#         # breakpoint()
#         # This isn't general
#         im.iter_axes = "ct"
#         metadata = {}
#         print("Getting metadata")
#         for i, frame in enumerate(im):
#             metadata[str(frame.metadata["coords"])] = str(i)
#             # breakpoint()
#         print("Saving metadata")
#         with open(output.metadata, "w") as f:
#             json.dump(metadata, f)
#         print("Saved metadata")
#         # breakpoint()
#         # breakpoint()
#         # im = PIL.Image.fromarray(frame)
#         # file_name = f"{output[0]}/{str(coords)}.png"
#         # print(file_name)
#         # im.save(file_name)
#         im.close()


# def save_image_at_frame(path_in, path_out, i):
#     i = int(i)
#     ims = pims.Bioformats(path_in)
#     ims.iter_axes = "ct"
#     # frame = ims[int(i)]
#     im = PIL.Image.fromarray(ims[int(i)])
#     im.save(path_out)
#     print(f"Saving {path_out}")


checkpoint convert_to_png:
    input:
        lif="data/plast_cell/{filename}.lif",
        # metadata="results/plast_cell/{filename}/metadata.json",
    output:
        # image_dir=dynamic("results/plast_cell/{filename}"),
        png="results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.png",
    script:
        "scripts/convert_to_png.py"


# run:
# save_image_at_frame(input.lif, output.png, int(wildcards.i))


# Define rule to convert .czi files to .zarr using bioformats2raw
# rule convert_to_png_dynamic:
#     input:
#         lif="data/plast_cell/{filename}.lif",
#         # metadata="results/plast_cell/{filename}/metadata.json",
#     output:
#         # image_dir=dynamic("results/plast_cell/{filename}"),
#         png=dynamic("results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.png"),
#     run:
#         filename = wildcards.filename
#         ims = pims.Bioformats(input.lif)
#         ims.iter_axes = "ct"
#         for i, frame in tqdm(enumerate(ims)):
#             coords = frame.metadata["coords"]
#             coords["z"] = 0
#             im = PIL.Image.fromarray(frame)
#             out_file, = expand(
#                 "results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.png",
#                 filename=filename,
#                 i=i,
#                 **coords
#             )
#             # breakpoint()
#             Path(out_file).parent.mkdir(exist_ok=True, parents=True)
#             im.save(out_file)
#         breakpoint()
#         return 0


# file_list.extend(
#     expand(
#         "results/plast_cell/{filename}/{i}/t={t}_z={z}_c={c}.png",
#         filename=filename,
#         i=i,
#         **coords,
#     )
# )
# # frame = ims[int(wildcards.i)]
# with PIL.Image.fromarray(ims[int(wildcards.i)]) as im:
#     with open(output.png, "wb") as f:
#         print("Saving")
#         im.save(f)
#         print("Saved")


rule upload_to_supervisley:
    input:
        png="results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.png",
    output:
        touch("results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.uploaded"),
    run:
        address = "https://app.supervise.ly/"
        token = os.environ["API_TOKEN"]
        api = sly.Api(address, token)
        project = api.project.get_or_create(
            workspace_id=WORKSPACE_ID, name="plast_data"
        )
        dataset = api.dataset.get_or_create(project.id, "dataset")
        # breakpoint()
        # images = glob("results/plast_cell/**/*.png", recursive=True)
        image_name = (
            f"{wildcards.filename}/t={wildcards.t}_z={wildcards.z}_c={wildcards.c}"
        )
        # breakpoint()
        api.image.upload_path(dataset.id, name=image_name, path=input.png)
        # api.close()

rule get_mask_from_image:
    input: "results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}.uploaded"
    output: "results/plast_cell/{filename}/i={i}_t={t}_z={z}_c={c}_mask.png"
    run:
        address = "https://app.supervise.ly/"
        token = os.environ["API_TOKEN"]
        api = sly.Api(address, token)
        project = api.project.get_or_create(
            workspace_id=WORKSPACE_ID, name="plast_data"
        )
        dataset = api.dataset.get_or_create(project.id, "dataset")
        image_id = api.image.get_info_by_name(dataset.id,name=name).id

        # breakpoint()
        # images = glob("results/plast_cell/**/*.png", recursive=True)
        # {filename}/i={i}_t={t}_z={z}_c={c}_mask.png
    